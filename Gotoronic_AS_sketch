// Fメカ操作時にリヤが動くのを修正
// 160211各ギヤごとにデータを持たせる。-> pos_data[10]
// Sweep
// by BARRAGAN <http://barraganstudio.com> 
// This example code is in the public domain.
// Sample code from Arduino´s IDE

// SERVO REAR
// Red = +5v
// Brown = GND
// Orange = Signal (pin 9 for this code)

// SERVO FRONT
// Red = +5v
// Brown = GND
// Orange = Signal (pin 8 for this code)


// 0.1 by pmalmsten http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1176098434
// 0.2 by farkinga
// 0.3 by farkinga - adds cool behaviors
/* 0.4 by pstrobl
   changed the original program to use on IR Kit For Arduino Model: DFR0107 32 bit controller.
   All keypresses are sent to the serial monitor at 9600 baud.
   pulseIn is always HIGH. The phototransistor in the kit does not invert the signal.
   uses pin 13 for heartbeat debug
   32 bits requires a long variable, so divided up into two 15 bit so can use integer variables
   use the first 15 bits of the 32 bits for remote and data stream verification. This code is always the same for every button press
   use the last 15 of the 32 bits for button press selection. This code changes for each button.
   ignore the middle 2 bits, it never changes. 
*/

#include <Servo.h> 
#include <Bounce2.h>
#include <MsTimer2.h> 

#define BUTTON_PIN 4  //REAR 
#define BUTTON_PIN2 5 //REAR
#define BUTTON_PIN_f1 6  //FRONT
#define BUTTON_PIN_f2 7  //FRONT
#define LED_PIN2 10

// Instantiate a Bounce object
Bounce debouncer = Bounce(); 
Bounce debouncer2 = Bounce(); 
Bounce debouncer3 = Bounce(); 
Bounce debouncer4 = Bounce();

// The current buttonState
// 0 : released
// 1 : pressed less than 1 seconds
// 2 : pressed longer than 1 seconds
// 3 : pressed longer than 2 seconds
int buttonState; 
int buttonState2; 
int buttonState3; 
int buttonState4; 
unsigned long buttonPressTimeStamp;
unsigned long buttonPressTimeStamp2;
unsigned long buttonPressTimeStamp3;
unsigned long buttonPressTimeStamp4;



//ロータリーエンコーダ用の設定
volatile int state = 0;  //ロータリーエンコーダで操作する値
volatile boolean Flag_A=true;  //ロータリーエンコーダA端子の状態変化を許すフラグ
volatile boolean Flag_B=false; //ロータリーエンコーダB端子の状態変化を許すフラグ
int RotEncState = LOW; //ロータリーエンコーダで入力したことを示すフラグ

Servo myservo;  // create servo object to control a servo 
Servo myservo_f; // a maximum of eight servo objects can be created 
char input[2];  //シリアル通信の文字列格納用
char str[0];    //シリアル通信の文字列格納用
int pos = 0;    // variable to store the servo position
int pos_f = 0;  // variable to store the servo position 
 
#define IR_BIT_LENGTH 32    // number of bits sent by IR remote
#define FirstLastBit 15     // divide 32 bits into two 15 bit chunks for integer variables. Ignore center two bits. they are all the same.
#define BIT_1 1500          // Binary 1 threshold (Microseconds) 1500
#define BIT_0 450           // Binary 0 threshold (Microseconds) 450
#define BIT_START 4000      // Start bit threshold (Microseconds)
 
#define IR_PIN 13           // IR Sensor pin
#define LED_PIN 13          // LED goes off when signal is received
 
int debug = 0;              // flag as 1 to output raw IR pulse data stream length in microseconds
int output_verify = 0;      // flag as 1 to print decoded verification integers. same number for all buttons
int output_key = 1;         // flag as 1 to print decoded key integers
int remote_verify = 16128;  // verifies first bits are 11111100000000 different remotes may have different start codes


//////////////////////////////// REAR SHIFT SETTING PARAMETER START ///////////////////////////////////////////

//int pos_zero = 2180;          // shift 0 position 180deg ->1st gear direction, 0deg ->10th gear direction, 
//int pos_shiftstep = 56;      // shift step degree 68->56 @150809
int pos_data[10] = {2180, 2124, 2068, 2012, 1956, 1900, 1844, 1788, 1732, 1676}; // 10speed data

int pos_shiftover_up = 40;   // shift over degree
int pos_shiftover_down = 40; // shift over degree
int ovsft_delay = 500;      // over shift delay [msec]
int sft_delay = 20;         // shift delay per gear pos [msec]

//////////////////////////////// REAR SHIFT SETTING PARAMETER END ///////////////////////////////////////////

int pos_old  = 0;           // gear position
int pos_new  = 0;           // gear position
int pos_direction  = 1;     // shift direction
int ovsft_delay_tot = 100;    // over shift delay msec


//////////////////////////////// FRONT SHIFT SETTING PARAMETER START  ///////////////////////////////////////////

int pos_zero_f = 80;          // shift 0 position 180deg ->1st gear direction, 0deg ->10th gear direction, 
int pos_inner = 70;      //80->70 @150809
int pos_outer = 150;     //120->120 @150809
int pos_shiftstep_f = 5;      // shift step degree
int pos_shiftover_up_f = 40;   // shift over degree 15->20 @150809
int pos_shiftover_down_f = 40; // shift over degree 15->40 @150809
int ovsft_delay_f = 2000;      // over shift delay [msec]
int sft_delay_f = 20;         // shift delay per gear pos [msec]

//////////////////////////////// FONT SHIFT SETTING PARAMETER END ///////////////////////////////////////////

int pos_old_f  = 0;           // gear position
int pos_new_f  = 0;           // gear position
int pos_direction_f  = 1;     // shift direction
int ovsft_delay_tot_f = 100;    // over shift delay msec


 
void setup() 
{ 
  myservo.attach(9);        // attaches the servo on pin 9 to the servo object 
  myservo_f.attach(8);      // attaches the servo on pin 8 to the servo object 
  pinMode(LED_PIN, OUTPUT); //This shows when ready to recieve
  pinMode(IR_PIN, INPUT);
  digitalWrite(LED_PIN, LOW);
  //pos = pos_zero;         //set zero position
  pos = pos_data[0];      //set zero position
  myservo.writeMicroseconds(pos);                // tell servo to go to position in variable 'pos'
  delay(200);                         // waits 15ms for the servo to reach the position 15
  pos_f = pos_zero_f;         //set zero position
  myservo_f.write(pos_f);                // tell servo to go to position in variable 'pos'
  delay(200);                         // waits 15ms for the servo to reach the position 15
  Serial.begin(9600);
     // while (!Serial) {
     //   ; // wait for serial port to connect. Needed for Leonardo only
     // }
  //  establishContact();  // send a byte to establish contact until receiver responds 
   //  MsTimer2::set(1000, servoctl);
   //  MsTimer2::start();
   
  // Setup the button
  pinMode(BUTTON_PIN,INPUT);
  pinMode(BUTTON_PIN2,INPUT);
  pinMode(BUTTON_PIN_f1,INPUT);
  pinMode(BUTTON_PIN_f2,INPUT);
  // Activate internal pull-up
  digitalWrite(BUTTON_PIN,HIGH);
  digitalWrite(BUTTON_PIN2,HIGH);
  digitalWrite(BUTTON_PIN_f1,HIGH);
  digitalWrite(BUTTON_PIN_f2,HIGH);
  
  // After setting up the button, setup debouncer
  debouncer.attach(BUTTON_PIN);
  debouncer2.attach(BUTTON_PIN2);
  debouncer3.attach(BUTTON_PIN_f1);
  debouncer4.attach(BUTTON_PIN_f2);
  debouncer.interval(2);
  debouncer2.interval(2);
  debouncer3.interval(2);
  debouncer4.interval(2);
  //Setup the LED
  pinMode(LED_PIN2,OUTPUT);

  pinMode(2, INPUT_PULLUP);  //デジタルピン2をプルアップ入力にする
  pinMode(3, INPUT_PULLUP);  //デジタルピン3をプルアップ入力にする
  attachInterrupt(0, Fall_A  , FALLING);//デジタルピン2の電圧が下がった時の処理関数を登録
  attachInterrupt(1, Change_B, CHANGE );//デジタルピン3の電圧が変化した時の処理関数を登録
   
} 
 
void loop() { 
  if (Serial.available() > 0) {     // get incoming byte:
  serialin();                        //下記のvoid serialinの内容を実行
  Serial.println(pos);              // send a capital ASerial.println('pos');   // send a capital pos
  myservo.writeMicroseconds(pos);                // tell servo to go to position in variable 'pos'
  myservo_f.write(pos_f);              // tell servo to go to position in variable 'pos'
  delay(50);                         // waits 15ms for the servo to reach the position 15
  Serial.println(myservo.read());
  Serial.println(myservo_f.read());
  }
//  
//  digitalWrite(LED_PIN, HIGH);
////  int key = get_ir_key();
//   
//  digitalWrite(LED_PIN, LOW);  // turn LED off while processing response
////  do_response(key);
//  delay(260);                  // 2 cycle delay to cancel duplicate keypresses 130
///*
//  wait for a keypress from the IR remote, and return the
//  integer mapping of that key (e.g. power button on remote returns
//  the integer 1429)
//*/
//

 // Update the debouncer and get the changed state
  boolean changed = debouncer.update();
  boolean changed2 = debouncer2.update();
  boolean changed_f1 = debouncer3.update();
  boolean changed_f2 = debouncer4.update();
  
  if ( changed ) {
       // Get the update value
    int value = debouncer.read();
    if ( value == HIGH) {
       digitalWrite(LED_PIN2, HIGH );
       buttonState = 0;
       Serial.println("Button released (state 0)");
       pos_ctrl_end();
   }
   else  {
         digitalWrite(LED_PIN2, LOW );
         buttonState = 1;
         Serial.println("Button pressed (state 1)");
         buttonPressTimeStamp = millis();
         pos_old = pos_new;
         if( pos_new < 9 ) {pos_new ++;}
         pos_ctrl();
     }
  }

  if ( changed2 ) {
       // Get the update value
    int value2 = debouncer2.read();
    if ( value2 == HIGH) {
       digitalWrite(LED_PIN2, HIGH );
       buttonState2 = 0;
       Serial.println("Button2 released (state 0)");
       pos_ctrl_end();
   }
   else {
         digitalWrite(LED_PIN2, LOW );
         buttonState2 = 1;
         Serial.println("Button2 pressed (state 1)");
         buttonPressTimeStamp2 = millis();
         pos_old = pos_new;
         if( pos_new >0 ) {pos_new --;}
         pos_ctrl();
        }
  }


  
  if  ( buttonState == 1 ) {
    if ( millis() - buttonPressTimeStamp >= 500 ) {
        buttonState = 2;
        Serial.println("Button held for 0.50 seconds (state 2)");
        pos_old = pos_new;
        if( pos_new < 9 ) {pos_new ++;}
        pos_ctrl();
       }
  }
  if  ( buttonState == 2 ) {
    if ( millis() - buttonPressTimeStamp >= 1000 ) {
        buttonState = 3;
        Serial.println("Button held for 1.0 seconds (state 3)");
        pos_old = pos_new;
        if( pos_new < 9 ) { pos_new ++;}
        pos_ctrl();
        }
  } 
   if  ( buttonState == 3 ) {
    if ( millis() - buttonPressTimeStamp >= 1500 ) {
        buttonState = 4;
       Serial.println("Button held for 1.5 seconds (state 4)");
       pos_old = pos_new;
       if( pos_new < 9 ) {pos_new ++;}
           pos_ctrl();
    }
  } 
 
  if  ( buttonState2 == 1 ) {
    if ( millis() - buttonPressTimeStamp2 >= 500 ) {
        buttonState2 = 2;
       Serial.println("Button2 held for 0.50 seconds (state 2)");
       pos_old = pos_new;
       if( pos_new  >0 ) {pos_new --;}
           pos_ctrl();
       }
  }
  if  ( buttonState2 == 2 ) {
    if ( millis() - buttonPressTimeStamp2 >= 1000 ) {
        buttonState2 = 3;
       Serial.println("Button2 held for 1.0 seconds (state 3)");
       pos_old = pos_new;
       if( pos_new  >0 ) {pos_new --;}
           pos_ctrl();
       }
  } 
  if  ( buttonState2 == 3 ) {
    if ( millis() - buttonPressTimeStamp2 >= 1500 ) {
        buttonState2 = 4;
       Serial.println("Button2 held for 1.5 seconds (state 4)");
       pos_old = pos_new;
       if( pos_new  >0 ) { pos_new --;}
           pos_ctrl();
       }
  } 


  
if ( changed_f1 ) {
     // Get the update value
  int value = debouncer3.read();
  if ( value == HIGH) {
     digitalWrite(LED_PIN2, HIGH );
     buttonState3 = 0;
     Serial.println("Button released (state 0)");
     pos_f = pos_inner + pos_shiftover_down_f;   // shift over degree 
     Serial.println(pos_f);
     myservo_f.write(pos_f); 
     
 }
 else  {
       digitalWrite(LED_PIN2, LOW );
       buttonState3 = 1;
       Serial.println("Button pressed (state 1)");
       buttonPressTimeStamp3 = millis();
       pos_old_f = pos_new_f;
       //if( pos_new < 9 ) {pos_new ++;}
       pos_new_f = pos_inner;
       pos_f = pos_inner;   // shift over degree 
       Serial.println(pos_f);
       myservo_f.write(pos_f); 
   }
}

if ( changed_f2 ) {
     // Get the update value
  int value2 = debouncer4.read();
  if ( value2 == HIGH) {
     digitalWrite(LED_PIN2, HIGH );
     buttonState4 = 0;
     Serial.println("Button2 released (state 0)");
     pos_f = pos_outer - pos_shiftover_up_f;  // shift over degree
     Serial.println(pos_f);
     myservo_f.write(pos_f);   
 }
 else {
       digitalWrite(LED_PIN2, LOW );
       buttonState4 = 1;
       Serial.println("Button2 pressed (state 1)");
       buttonPressTimeStamp4 = millis();
       pos_old_f = pos_new_f;
     //  if( pos_new >0 ) {pos_new --;}
       pos_new_f = pos_outer;
       pos_f = pos_outer;  // shift over degree
       Serial.println(pos_f);
       myservo_f.write(pos_f);
      }
}


} // LOOP 完了



//////////////SUB CKT/////////////////////////

void establishContact() {
  while (Serial.available() <= 0) {
    Serial.println('A');   // send a capital A
    delay(300);
  }
}

void serialin() {
    Serial.print("serial in" );
    for(int i=0;i<=2;i++)//iが0～2まで変動するので、合計3桁分
        {
//          Serial.println(i);
          input[i]=Serial.read(); //一桁づつ入れてゆく
//          delay(100); 
        }
       Serial.println(input); 
       int buf=atoi(input);//シリアル入力された文字列をint型に変換
//       if(buf<=180&&buf>=0)//安全のため、PWMで扱える0～255の範囲の時のみPWM出力の値に反映
//       {
         pos=buf;
        Serial.print("serial input = ");
        Serial.println(pos);
//       }
 
//      Serial.flush();  
 }

///////////////POSITION CTRL///////////////////
void pos_ctrl() 
{
        pos_direction = pos_new - pos_old;
        ovsft_delay_tot = abs(pos_direction) * sft_delay + ovsft_delay;
        Serial.println(ovsft_delay_tot);
        if( pos_direction > 0 ) {                                         // up stroke
           //pos = pos_zero - pos_shiftstep * pos_new - pos_shiftover_up;   // shift over degree
           pos = pos_data[pos_new] - pos_shiftover_up;   // shift over degree
           Serial.println(pos);
//delay(130);
           myservo.writeMicroseconds(pos); 
//           delay(ovsft_delay_tot);                                         // waits Xmsec for the servo to reach the position 
//           pos = pos_zero - pos_shiftstep * pos_new;                       // shift over degree
//           myservo.writeMicroseconds(pos);                                             // tell servo to go to position in variable 'pos'
        }
       if( pos_direction < 0 ) {                                           // down stroke 
           //pos = pos_zero - pos_shiftstep * pos_new + pos_shiftover_down;  // shift over degree
           pos = pos_data[pos_new] + pos_shiftover_down;   // shift over degree
           Serial.println(pos);
// delay(130);
           myservo.writeMicroseconds(pos); 
//           delay(ovsft_delay_tot);                                         // waits Xmsec for the servo to reach the position 
//           pos = pos_zero - pos_shiftstep * pos_new;                       // shift over degree
//           myservo.writeMicroseconds(pos);                                             // tell servo to go to position in variable 'pos'
        }
//       Serial.println(pos);
//       Serial.println(myservo.read());
//       delay(15);                                                          // waits 15ms for the servo to reach the position 
   if( pos_new == 9 ) {                                         // 9position
           //pos = pos_zero - pos_shiftstep * pos_new - pos_shiftover_up;   // shift over degree
           pos = pos_data[pos_new] - pos_shiftover_up;   // shift over degree
           myservo.writeMicroseconds(pos); 
   }
   if( pos_new == 0 ) {                                         // 9position
            //pos = pos_zero - pos_shiftstep * pos_new + pos_shiftover_down;    // shift over degree
            pos = pos_data[pos_new] + pos_shiftover_down;   // shift over degree
            myservo.writeMicroseconds(pos); 
   }


}

void pos_ctrl_end() {
           //pos = pos_zero - pos_shiftstep * pos_new;                       // shift over degree
           pos = pos_data[pos_new];           
           myservo.writeMicroseconds(pos);                                             // tell servo to go to position in variable 'pos'      
           Serial.println(myservo.read());
           Serial.print("gear position = ");
           Serial.println(pos_new);
           
}


///////////////POSITION CTRL FRONT///////////////////
void servo_move()
{
  myservo_f.write(pos_f);
      MsTimer2::stop();
      Serial.println("TimerDelay");
      Serial.println(myservo_f.read());
}


void pos_ctrl_f() 
{
        pos_direction_f = pos_new_f - pos_old_f;
        ovsft_delay_tot_f = abs(pos_direction_f) * sft_delay_f + ovsft_delay_f;
        Serial.println(ovsft_delay_tot_f);
        if( pos_direction_f > 0 ) {                                         // up stroke
           //pos_f = pos_zero_f - pos_shiftstep_f * pos_new_f - pos_shiftover_up_f;   // shift over degree
           pos_f = pos_inner - pos_shiftover_up_f;   // shift over degree 
           Serial.println(pos_f);
// delay(130);
           myservo_f.write(pos_f); 
           //delay(ovsft_delay_tot_f);                                         // waits Xmsec for the servo to reach the position 
           if( RotEncState = HIGH){
           RotEncState = LOW;  
           //pos_f = pos_zero_f - pos_shiftstep_f * pos_new_f;                       // shift over degree
           pos_f = pos_inner;                       // shift over degree
           MsTimer2::set(ovsft_delay_tot_f,servo_move); // 500msごとにオンオフ
           MsTimer2::start();
           // myservo_f.write(pos_f);                                             // tell servo to go to position in variable 'pos'
           }
        }
       if( pos_direction_f < 0 ) {                                           // down stroke 
           //pos_f = pos_zero_f - pos_shiftstep_f * pos_new_f + pos_shiftover_down_f;  // shift over degree
           pos_f = pos_outer + pos_shiftover_down_f;  // shift over degree
           Serial.println(pos_f);
// delay(130);
           myservo_f.write(pos_f); 
           //delay(ovsft_delay_tot_f);            // waits Xmsec for the servo to reach the position 
          if( RotEncState = HIGH){
           RotEncState = LOW;  
           //pos_f = pos_zero_f - pos_shiftstep_f * pos_new_f;                       // shift over degree
           pos_f = pos_outer;                       // shift over degree
           MsTimer2::set(ovsft_delay_tot_f,servo_move); // 500msごとにオンオフ
           MsTimer2::start();
           //myservo_f.write(pos_f);                                             // tell servo to go to position in variable 'pos'
          }
        }
       Serial.println(pos_f);

       delay(15);                                                          // waits 15ms for the servo to reach the position 
}

//void pos_ctrl_end_f() {
//       //pos_f = pos_zero_f - pos_shiftstep_f * pos_new_f;
//       pos_f = pos_zero_f;
//       myservo_f.writeMicroseconds(pos_f);                                             // tell servo to go to position in variable 'pos' myservoy->myservo_f 2015/2/26     
//       Serial.println(myservo_f.read());
//       Serial.print("Front gear position = ");
//       Serial.println(pos_new_f); 
//}

///////////////ROT_ENC CTRL FRONT///////////////////
void Fall_A() {  //デジタルピン2の電圧が下がった時

if(!Flag_A){return;}  //A端子の認識が許されない時は戻る
Flag_B=true;  //B端子の状態変化の監視を有効にする
Flag_A=false; //A端子の状態変化の監視を無効にする

}
void Change_B() {  //デジタルピン3の電圧が変化した時
  if(!Flag_B){return;} //B端子の認識が許されない時は戻る
  if(HIGH == digitalRead(2)){ //既にA端子がHIGHならば
        if(HIGH == digitalRead(3)){
          state--;
                  Serial.println(state);  //シリアルで値を送信
          pos_old_f = pos_new_f;
          pos_new_f = pos_inner;
          pos_ctrl_f();
          }else{
          state++;
            Serial.println(state);  //シリアルで値を送信
          pos_old_f = pos_new_f;
          pos_new_f = pos_outer;
          RotEncState = HIGH;     //ロータリーエンコーダで入力したことを示すフラグ
          pos_ctrl_f();
          }  //現在の電圧から加減算を行う
        Flag_B=false; //B端子の状態変化の監視を無効にする
        Flag_A=true;  //A端子の状態変化の監視を有効にする

        }

}


///////////////IR CTRL///////////////////
int get_ir_key()
{
  int pulse[IR_BIT_LENGTH];
  int bits[IR_BIT_LENGTH];
 
  do { //Wait for a start bit
//     if (Serial.available() > 0) {
//      break;
//     }
  }
  while(pulseIn(IR_PIN, HIGH) < BIT_START);
  read_pulse(pulse);
  pulse_to_bits(pulse, bits);
  RemoteVerify(bits);
  return bits_to_int(bits);
 
}
 
 
/*
  use pulseIn to receive IR pulses from the remote.
  Record the length of these pulses (in ms) in an array
*/
 
void read_pulse(int pulse[])
{
  for (int i = 0; i < IR_BIT_LENGTH; i++)
  {
    pulse[i] = pulseIn(IR_PIN, HIGH);
  }
}
 
/*
  IR pulses encode binary "0" as a short pulse, and binary "1"
  as a long pulse.  Given an array containing pulse lengths,
  convert this to an array containing binary values
*/
 
void pulse_to_bits(int pulse[], int bits[])
{
  if (debug) { Serial.println("-----"); }
  for(int i = 0; i < IR_BIT_LENGTH; i++)
  {
    if (debug) { Serial.println(pulse[i]); }
    if(pulse[i] > BIT_1) //is it a 1?
    {
      bits[i] = 1;
    } 
    else if(pulse[i] > BIT_0) //is it a 0?
    {
      bits[i] = 0;
    }
    else //data is invalid...
    {
      Serial.println("Error");
    }
  }
}
 
/*
  check returns proper first 14 check bits
*/
 
void RemoteVerify(int bits[])
{
  int result = 0;
  int seed = 1;
   
  //Convert bits to integer
  for(int i = 0 ; i < (FirstLastBit) ; i++)
  {      
    if(bits[i] == 1)
    {
    result += seed;
    }
     
    seed *= 2;
  }
        if (output_verify)
      {
        Serial.print("Remote ");
        Serial.print(result);
        Serial.println(" verification code");
      }
 if (remote_verify != result) {delay (60); get_ir_key();} //verify first group of bits. delay for data stream to end, then try again.
}
 
 
/*
  convert an array of binary values to a single base-10 integer
*/
 
int bits_to_int(int bits[])
{
  int result = 0;
  int seed = 1;
   
  //Convert bits to integer
  for(int i = (IR_BIT_LENGTH-FirstLastBit) ; i < IR_BIT_LENGTH ; i++)
  {      
    if(bits[i] == 1)
    {
    result += seed;
    }  
    seed *= 2;
  }
  return result;
}
 
 
/*
  respond to specific remote-control keys with different behaviors
*/
 
void do_response(int key)
{ 
   
  if (output_key)
   {
      Serial.print("Key ");
      Serial.println(key);
   }
   
  switch (key)
  {
    case 32640:  // turns on UUT power
      Serial.println("POWER");
      pos_old_f = pos_new_f;
      pos_new_f = 0;
      pos_ctrl_f();
      break;
 
    case 32385:  // FUNC/STOP turns off UUT power
      Serial.println("FUNC/STOP");
      pos_old_f = pos_new_f;
      pos_new_f = pos_outer;
      pos_ctrl_f();
      break;
 
    case 32130:  // |<< ReTest failed Test
      Serial.println("|<<");
      pos_f=pos_f+10;
      Serial.println(pos_f);   // send a capital ASerial.println('pos');   // send a capital pos
      myservo_f.write(pos_f);              // tell servo to go to position in variable 'pos'
      Serial.println(myservo_f.read());
      delay(200);                       // waits 15ms for the servo to reach the position 
      break;
 
    case 32002:  // >|| Test
      Serial.println(">||");
      break;
 
    case 31875:  // >>| perform selected test number
      Serial.println(">>|");
      pos_f=pos_f-10;
      Serial.println(pos_f);   // send a capital ASerial.println('pos');   // send a capital pos
      myservo_f.write(pos_f);              // tell servo to go to position in variable 'pos'
      Serial.println(myservo_f.read());
      delay(200);                       // waits 15ms for the servo to reach the position 
      break;
 
    case 32512:  // VOL+ turns on individual test beeper
      Serial.println("VOL+");
      break;
 
    case 31492:  // VOL- turns off individual test beeper
      Serial.println("VOL-");
      break;
 
    case 31620:  // v scroll down tests
      Serial.println("v");
      pos=pos+10;
      Serial.println(pos);   // send a capital ASerial.println('pos');   // send a capital pos
      myservo.writeMicroseconds(pos);              // tell servo to go to position in variable 'pos'
      Serial.println(myservo.read());
      delay(200);                       // waits 15ms for the servo to reach the position 
      break;
 
    case 31365:  // ^ scroll up tests
      Serial.println("^");
      pos=pos-10;
      Serial.println(pos);   // send a capital ASerial.println('pos');   // send a capital pos
      myservo.writeMicroseconds(pos);              // tell servo to go to position in variable 'pos'
      Serial.println(myservo.read());
      delay(200);                       // waits 15ms for the servo to reach the position 
      break;
 
    case 30982:  // EQ negative tests internal setup
      Serial.println("EQ");
      pos_old = pos_new;
      pos_new = 0;
      pos_ctrl();
      break;
 
    case 30855:  // ST/REPT Positive tests Select Test and Repeat Test
    Serial.println("ST/REPT");
      pos_old = pos_new;
      pos_new = 0;
      pos_ctrl();
      break;
 
    case 31110:  // 0
      Serial.println("0");
      pos_old = pos_new;
      pos_new = 0;
      pos_ctrl();
      break;
 
    case 30600:  // 1
      Serial.println("1");
      pos_old = pos_new;
      pos_new = 1;
      pos_ctrl();
      break;
 
    case 30472:  // 2
      Serial.println("2");
      pos_old = pos_new;
      pos_new = 2;
      pos_ctrl();
      break;
 
    case 30345:  // 3
      Serial.println("3");
      pos_old = pos_new;
      pos_new = 3;
      pos_ctrl();
      break;
 
    case 30090:  // 4
      Serial.println("4");
      pos_old = pos_new;
      pos_new = 4;
      pos_ctrl();
      break;
 
    case 29962:  // 5
      Serial.println("5");
      pos_old = pos_new;
      pos_new = 5;
      pos_ctrl();
      break;
 
    case 29835:  // 6
      Serial.println("6");
      pos_old = pos_new;
      pos_new = 6;
      pos_ctrl();
      break;
 
    case 29580:  // 7
      Serial.println("7");
      pos_old = pos_new;
      pos_new = 7;
      pos_ctrl();
      break;
 
    case 29452:  // 8
      Serial.println("8");
      pos_old = pos_new;
      pos_new = 8;
      pos_ctrl();
      break;
 
    case 29325:  // 9
      Serial.println("9");
      pos_old = pos_new;
      pos_new = 9;
      pos_ctrl();
      break;
      
    default:
      {
        Serial.print("Key ");
        Serial.print(key);
        Serial.println(" not programmed");
      }
    break;
  }
}





